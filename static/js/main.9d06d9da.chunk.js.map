{"version":3,"sources":["Components/MainAppWindow/SwitchToMobileModal.js","Constants/Const.js","Helper/ApiFetcher.js","Helper/ProcessData.js","Components/Settings/AudioSettingsModal.js","Components/Settings/AddContactModal.js","Components/Settings/Settings.js","Components/Friends/Friends.js","Components/MainAppWindow/ScreenWithFriends.js","Components/InputField/Input.js","Components/ChatWindow/ChatWindow.js","Components/MainAppWindow/ScreenWithChats.js","Components/MainAppWindow/MainAppWindow.js","Components/Welcome/Login.js","Components/Welcome/Register.js","Components/Welcome/WelcomePage.js","Helper/HubConnection.js","App.js","serviceWorker.js","index.js","lol.mp3","dr_stone_ending.mp3"],"names":["SwitchToMobile","setIsMobile","useState","visible","setVisible","handleClick","value","console","log","Modal","show","onHide","centered","Body","closebutton","className","Button","variant","onClick","style","marginLeft","BackendLink","SettingsList","SongList","GetAllChatsByUserId","userId","a","async","fetch","chats","json","FetchLastMessagesByChatId","chatId","user","totalMessages","messagesToState","messages","forEach","message","msgDisplayId","push","Message","id","messageText","TryLoginOrRegister","loginData","endpoint","method","headers","body","JSON","stringify","result","status","CheckForResponseCodeAndThrow","text","code","error","ProcessChats","chatsToState","chat","chatToAdd","lastMessage","lastMessagesAreFetched","name","friendUserName","msg","FindChatIndexByChatId","chatData","i","AudioSettingsModal","handleClose","updateAudio","chooseSong","setValue","song","setSong","changeRadioColor","isOn","Dropdown","Toggle","Menu","map","item","Item","key","changeSong","ToggleButtonGroup","type","onChange","val","ToggleButton","Boolean","AddContactModal","createNewChat","email","setEmail","setError","useContext","UserChatsContext","Form","onSubmit","event","preventDefault","res","SendNewChatData","then","userName","catch","err","toString","includes","Group","controlId","Label","Control","placeholder","target","Text","FormGroup","disabled","length","Settings","logout","seen","modal","setModal","size","xmlns","width","height","viewBox","d","fill","index","Friends","clickOnChat","setChatIndex","MainChatWindowContext","chatIndex","isMobile","unSelected","margin","backgroundColor","color","selected","marginBottom","marginTop","letter","charAt","justify","ellipsis","LeftPart","LoadTenMessages","updAudio","Input","onSendClick","showEmoji","emojiSeen","input","inputChange","onSend","SendMessageToDatabaseAndScreen","align","fit","verticalAlign","ChatWindow","loadTen","GoBack","LoadMoreMessages","maxHeight","ClassName","showSenderName","RightPart","setNotification","SendMessage","NotificationContext","notificationBody","notificationHeader","Alert","onClose","dismissible","React","createContext","MainAppWindow","setChats","detectMobile","useMobileDetect","setChatId","redirect","setRedirect","partToShow","setPartToShow","shouldSetChatId","currentChatsState","Object","assign","currentChat","AddTenMessagesToState","newState","something","document","getElementsByClassName","scrollTop","alert","enable","getElementsByTagName","play","pause","useEffect","Provider","to","src","songname","witcher","drStone","setSongMP3","preload","loop","Login","loginOrRegister","password","setPassword","isConnecting","setIsConnecting","success","setSuccess","validateForm","Card","Header","setTimeout","FormLabel","FormControl","autoFocus","e","href","block","Spinner","as","animation","role","aria-hidden","Register","setName","username","WelcomePage","path","Navbar","bg","expand","Brand","aria-controls","Collapse","Nav","Link","alt","createHubConnection","setUser","updateChats","hubConnect","HubConnectionBuilder","withUrl","build","start","prev","loc_user","onclose","on","updatedChat","chatName","prevState","neededChatIndex","updatedChats","App","hubConnection","setHubConnection","notification","GetChats","ConnectAndSetHubToState","hub","l_chatIndex","l_chatId","msgText","invoke","stop","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.9d06d9da.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\n\r\n\r\n\r\nexport default function SwitchToMobile({setIsMobile}) {\r\n\r\n    const [visible, setVisible] = useState(true);\r\n\r\n    const handleClick = (value) =>{\r\n        console.log(value);\r\n        setIsMobile((value));\r\n        setVisible(false);\r\n    };\r\n    return (\r\n        <>\r\n            <Modal show={visible} onHide={()=>setVisible(false)} centered >\r\n                <Modal.Body closebutton = {'true'} className={'tc'} >\r\n                    <h3>Swtich to mobile version</h3>\r\n                    <div >\r\n                        <Button variant=\"primary\" onClick = {()=>handleClick(true)}>Yes</Button>\r\n                        <Button style = {{marginLeft:'10%'}} variant=\"secondary\"  onClick = {()=>handleClick(true)}>No</Button>\r\n                    </div>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n}","\r\n\r\nexport const BackendLink = 'https://rocket-chat-api.azurewebsites.net';\r\n\r\nexport const SettingsList = ['Audio','Add Contact','Logout'];\r\nexport const SongList = ['witcher','drStone'];","import {Message} from \"react-chat-ui\";\r\nimport {BackendLink} from \"../Constants/Const\";\r\n\r\nexport async function GetAllChatsByUserId(userId) {\r\n    try {\r\n        let chats = await fetch(`${BackendLink}/api/getallchats?userId=${userId}`);\r\n        chats = await chats.json();\r\n        return chats;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\n//Sends a request to the server and returns an array of messages received from there\r\nexport async function FetchLastMessagesByChatId(chatId,user,totalMessages) {\r\n    let messagesToState = [];\r\n    try {\r\n        let messages = await fetch(`${BackendLink}/api/getlastmessages?chatId=${chatId}&totalMessagesLoaded=${totalMessages}`);\r\n        messages = await messages.json();\r\n        await messages.forEach(message =>{\r\n            let msgDisplayId = message.userId === user.userId ? 0 : 1;\r\n            messagesToState.push(new Message({id:msgDisplayId,message:message.messageText}));\r\n        });\r\n        return messagesToState;\r\n    }\r\n    catch (error) {\r\n        throw error;\r\n    }\r\n}\r\n\r\nexport async function TryLoginOrRegister (loginData,endpoint) {\r\n    try {\r\n        console.log(`${BackendLink}/api/${endpoint}`);\r\n        let result = await fetch(`${BackendLink}/api/${endpoint}`, {\r\n            method: 'post',\r\n            headers: {'Content-type': 'application/json'},\r\n            body: JSON.stringify(loginData)\r\n        });\r\n        let status = result.status;\r\n        result = await result.json();\r\n        CheckForResponseCodeAndThrow(status,result.text);\r\n        return result;\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nexport async function SendNewChatData (userId,email) {\r\n    try {\r\n        let res = await fetch(`${BackendLink}/api/addchat?curUserId=${userId}&emailToAdd=${email}`);\r\n        let status = res.status;\r\n        res = await res.json();\r\n        CheckForResponseCodeAndThrow(status,res.text);\r\n        return res;\r\n\r\n    } catch (e) {\r\n        throw e;\r\n    }\r\n}\r\n\r\nfunction CheckForResponseCodeAndThrow(code,error){\r\n    switch (code) {\r\n        case 400:\r\n            throw error;\r\n        case 500 :\r\n            throw 'Server error,try again later';\r\n        case 404 :\r\n            throw'Server error,try again later';\r\n        default:\r\n            break;\r\n    }\r\n}","import {Message} from \"react-chat-ui\";\r\nimport {FetchLastMessagesByChatId} from \"./ApiFetcher\";\r\n\r\nexport function ProcessChats (chats,userId) {\r\n    let chatsToState = [];\r\n\r\n    chats.forEach(chat=>{\r\n        let msgDisplayId,chatToAdd;\r\n        if(chat.lastMessage) {\r\n            msgDisplayId = chat.lastMessage.userId === userId ? 0 : 1;\r\n            chatToAdd = {id:chat.chatId,lastMessagesAreFetched:false, name: chat.friendUserName,msg:[new Message({id:msgDisplayId,message:chat.lastMessage.messageText})]};\r\n        }\r\n        else{\r\n            // lastMessagesAreFetched value doesn't matter in this case,as the chat is empty and must be updated live time anyway\r\n            chatToAdd = {id:chat.chatId,lastMessagesAreFetched:false, name: chat.friendUserName,msg:[]};\r\n        }\r\n        chatsToState.push(chatToAdd);\r\n    });\r\n    return chatsToState;\r\n}\r\n\r\n//loop until u find chat with ID equal to given, return index\r\nexport const FindChatIndexByChatId = (chatId,chatData) =>{\r\n    let i = 0;\r\n    for(let chat of chatData){\r\n        if(chat.id === chatId) {\r\n            return i;\r\n        }\r\n        i++;\r\n    }\r\n    return -1;\r\n};\r\n\r\nexport const AddTenMessagesToState = async (id,user,currentChat)=>{\r\n    try {\r\n        let messages = await FetchLastMessagesByChatId(id, user, currentChat.msg.length);\r\n        currentChat.msg.forEach((msg, i) => {\r\n            messages.push(msg);\r\n        });\r\n        currentChat.lastMessagesAreFetched = true;\r\n        currentChat.msg = [];\r\n        currentChat.msg = [...messages];\r\n\r\n        return currentChat;\r\n    }\r\n    catch (e) {\r\n        throw e;\r\n    }\r\n};","import React,{useState} from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport {SongList} from \"../../Constants/Const\";\r\n\r\n\r\n// TODO use gloabl state instead of local\r\nfunction AudioSettingsModal({show,handleClose,updateAudio,chooseSong}) {\r\n    const [value, setValue] = useState(0);\r\n    const [song, setSong] = useState('');\r\n\r\n    const handleChange = (val) => {\r\n        setValue(val);\r\n        if(val && song){\r\n            updateAudio(true);\r\n        }\r\n        else if(!val) {\r\n            updateAudio(false);\r\n        }\r\n    };\r\n\r\n    const changeRadioColor = (isOn) =>{\r\n        return isOn ? 'primary' : 'secondary';\r\n    };\r\n    const changeSong = (item) =>{\r\n        setValue(0);\r\n        chooseSong(item);\r\n        setSong(item);\r\n    };\r\n    return (\r\n        <>\r\n        <Modal show={show} onHide={handleClose} centered>\r\n            <Modal.Body>\r\n                <h3>Audio settings</h3>\r\n                <h5>Current song</h5>\r\n                <Dropdown >\r\n                    <Dropdown.Toggle variant=\"success\" id=\"dropdown-basic\">\r\n                        {song\r\n                            ? <>{song}</>\r\n                            :<>Choose song </>\r\n                        }\r\n                    </Dropdown.Toggle>\r\n                    <Dropdown.Menu>\r\n                        {SongList.map((item)=>(\r\n                                <Dropdown.Item key = {item} onClick = {()=>changeSong(item)}>{item}</Dropdown.Item>\r\n                        ))}\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n                <h4> Playback </h4>\r\n                    <ToggleButtonGroup type=\"radio\" name=\"options\" value={value} onChange={handleChange}>\r\n                        <ToggleButton variant ={changeRadioColor(Boolean(value))} value={1} >On</ToggleButton>\r\n                        <ToggleButton variant ={changeRadioColor(!Boolean(value))}  value={0}>Off</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n            </Modal.Body>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\nexport default AudioSettingsModal;","import React, {useContext, useState} from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Form from \"react-bootstrap/Form\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport {FormGroup} from \"react-bootstrap\";\r\nimport {UserChatsContext} from \"../../App\";\r\nimport {SendNewChatData} from \"../../Helper/ApiFetcher\";\r\n\r\n\r\n\r\nfunction AddContactModal({show,handleClose,createNewChat}) {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n\r\n    const {user} = useContext(UserChatsContext);\r\n    const userId = user? user.userId : 0;\r\n\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        SendNewChatData(userId,email)\r\n            .then(res=>{\r\n                if(res){\r\n                    createNewChat(res.chatId,res.userName,res.email);\r\n                    handleClose();\r\n                }\r\n            })\r\n            .catch(err=>{\r\n                if(err.toString().includes('Failed to fetch')){\r\n                    setError('No response from the server')\r\n                }else {\r\n                    setError(err);\r\n                }\r\n            });\r\n    };\r\n        //if no error add a new chat in main window\r\n    const validateForm = () => {\r\n        return email.length > 0;\r\n    };\r\n    return (\r\n        <>\r\n            <Modal show={show} onHide={handleClose} centered>\r\n                <Modal.Body>\r\n                    <h3>Add contact </h3>\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group controlId=\"formBasicEmail\">\r\n                            <Form.Label>Email address</Form.Label>\r\n                            <Form.Control type=\"email\" placeholder=\"Enter email\" onChange={(event)=>setEmail(event.target.value)} />\r\n                            <Form.Text className=\"text-muted\">\r\n                                Add bohdan@rocket.chat / artem@rocket.chat to provide feedback or just to chat.\r\n                            </Form.Text>\r\n                        </Form.Group>\r\n                        {error\r\n                            ? <FormGroup>\r\n                                <div className='dark-red'>{error}</div>\r\n                            </FormGroup>\r\n                            : <></>\r\n                        }\r\n                        <Button variant=\"primary\" type=\"submit\" disabled={!validateForm()}>\r\n                            Add friend\r\n                        </Button>\r\n                    </Form>\r\n                </Modal.Body>\r\n            </Modal>\r\n        </>\r\n    );\r\n}\r\nexport default AddContactModal;","import React,{useState} from 'react';\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport AudioSettingsModal from \"./AudioSettingsModal\";\r\nimport AddContactModal from \"./AddContactModal\";\r\nimport {SettingsList} from \"../../Constants/Const\";\r\n\r\n\r\n\r\nfunction Settings({updateAudio,logout,chooseSong,createNewChat}) {\r\n    const [modal, setModal] = useState({type:'',seen:false});\r\n\r\n    const handleClose = () => setModal({type:'',seen:false});\r\n    const handleShow = (type) => setModal({type:type,seen:true});\r\n\r\n    return (\r\n        <>\r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" size={'sm'} id=\"dropdown-basic\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/>\r\n                </svg>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                {SettingsList.map((item,index)=>(\r\n                    (item ==='Logout')\r\n                        ?\r\n                        <Dropdown.Item key = {item} onClick = {logout}>{SettingsList[index]}</Dropdown.Item>\r\n                        :\r\n                        <Dropdown.Item key = {item} onClick = {()=>handleShow(SettingsList[index])} >{SettingsList[index]} </Dropdown.Item>\r\n                ))}\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n            {\r\n                {\r\n                    'Add Contact': <AddContactModal show={modal.seen} handleClose={handleClose} createNewChat={createNewChat}/>,\r\n                    'Audio': <AudioSettingsModal show = {modal.seen} handleClose = {handleClose} updateAudio={updateAudio} chooseSong={chooseSong} />,\r\n                    'Logout': <></>\r\n                }[modal.type]\r\n            }\r\n           </>\r\n\r\n    );\r\n}\r\nexport default Settings;","import React, {useContext} from 'react';\r\nimport './Friends.css';\r\nimport {ThemeProvider,Avatar,Row,ChatList,ChatListItem,Column,Title,Subtitle}\r\n    from '@livechat/ui-kit';\r\n\r\nimport {UserChatsContext} from \"../../App\";\r\nimport {MainChatWindowContext} from \"../MainAppWindow/MainAppWindow\";\r\n\r\nfunction Friends({clickOnChat,setChatIndex}) {\r\n\r\n    const {chats} = useContext(UserChatsContext);\r\n    const {chatIndex,isMobile} = useContext(MainChatWindowContext);\r\n\r\n\r\n    const unSelected = {\r\n        margin: '2px',\r\n        backgroundColor: '#383838',\r\n        color: 'white'\r\n};\r\n    const selected = {\r\n        margin: '0px ',\r\n        marginBottom: '5px ',\r\n        marginTop: '5px ',\r\n        backgroundColor: 'black',\r\n        color: 'white'\r\n    };\r\n\r\n    const handleClick = (id,index) => {\r\n        clickOnChat(id,index,true);\r\n        setChatIndex(index);\r\n    };\r\n    return (\r\n        <ThemeProvider>\r\n            <ChatList>\r\n            {chats.map((chat,index) =>(\r\n                <div onClick={()=>handleClick(chat.id,index)} key = {chat.id} >\r\n                    <ChatListItem style = {(index === chatIndex && !isMobile) ? selected :unSelected } >\r\n                        <Avatar letter= {chat.name.charAt(0)} style={{color: 'black !important'}}/>\r\n                        <Column>\r\n                            <Row justify>\r\n                                <Title ellipsis>{chat.name}</Title>\r\n                            </Row>\r\n                            <Subtitle ellipsis>{\r\n                                chat.msg.length > 0\r\n                                    ? chat.msg[chat.msg.length-1].message\r\n                                    : 'Say something '\r\n                                }\r\n                            </Subtitle>\r\n                        </Column>\r\n                    </ChatListItem>\r\n                </div>\r\n            ) )}\r\n            </ChatList>\r\n        </ThemeProvider>\r\n    );\r\n}\r\nexport default Friends;","import React, {useContext} from 'react';\r\nimport {MainChatWindowContext} from \"./MainAppWindow\";\r\nimport Settings from \"../Settings/Settings\";\r\nimport Friends from \"../Friends/Friends\";\r\n\r\nexport default function LeftPart({createNewChat,LoadTenMessages,updAudio,setSong,logout,setChatIndex}) {\r\n\r\n\r\n    const {isMobile} = useContext(MainChatWindowContext);\r\n\r\n    return (\r\n        <div className={ isMobile ? 'left-side col-12' : 'left-side col-4 col-sm-4 col-md-4 col-lg-2 col-xl-2'}>\r\n            <Settings createNewChat={createNewChat} updateAudio={updAudio} chooseSong={setSong} logout={()=>logout()}/>\r\n            <div className={'left-content'}>\r\n                <Friends clickOnChat={LoadTenMessages} setChatIndex = {setChatIndex}/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React,{useState} from 'react';\r\nimport {ThemeProvider,TextComposer,Row,IconButton,AddIcon,TextInput,EmojiIcon,SendButton}\r\n    from '@livechat/ui-kit';\r\n//import OverlayTrigger from \"react-bootstrap/OverlayTrigger\";\r\n//import Popover from \"react-bootstrap/Popover\";\r\nimport Picker from 'emoji-picker-react';\r\n\r\n\r\nfunction Input({onSendClick,showEmoji,emojiSeen}) {\r\n    const[input,inputChange] = useState('');\r\n    //const [chosenEmoji, setChosenEmoji] = useState(null);\r\n\r\n    const updField = (event) =>{\r\n        if(event.type === 'change'){\r\n            inputChange(event.target.value);\r\n        }\r\n    };\r\n\r\n    const onEmojiClick = (event, emojiObject) => {\r\n        if(emojiObject){\r\n             inputChange(prevState => prevState + emojiObject.emoji)\r\n        }\r\n\r\n    };\r\n    const SendMessageToDatabaseAndScreen = (input) => {\r\n        onSendClick(input);\r\n    };\r\n\r\n    return (\r\n        <>\r\n\r\n        <ThemeProvider>\r\n            <TextComposer onSend={()=>SendMessageToDatabaseAndScreen(input)}\r\n             onChange={updField}>\r\n                <Row align=\"center\">\r\n                    <IconButton fit>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                    <TextInput fill = 'true'  />\r\n                    <SendButton fit />\r\n                </Row>\r\n\r\n                <Row verticalAlign=\"center\" justify=\"left\">\r\n                    <IconButton fit>\r\n                            <EmojiIcon onClick = {()=>showEmoji(!emojiSeen)}/>\r\n                    </IconButton>\r\n                </Row>\r\n            </TextComposer>\r\n        </ThemeProvider>\r\n            </>\r\n    );\r\n}\r\nexport default Input;","import React, {useContext, useState} from 'react';\r\nimport Input from \"../InputField/Input\";\r\nimport './Chat.css';\r\nimport { ChatFeed } from 'react-chat-ui'\r\nimport {MainChatWindowContext} from \"../MainAppWindow/MainAppWindow\";\r\n//import Picker from \"emoji-picker-react\";\r\n\r\n\r\n\r\nfunction ChatWindow({chatData,onSend,loadTen,GoBack}) {\r\n    const [emojiSeen,showEmoji] = useState(false);\r\n\r\n    const {chatId,chatIndex} = useContext(MainChatWindowContext);\r\n    const {isMobile} = useContext(MainChatWindowContext);\r\n\r\n    const LoadMoreMessages = (event) => {\r\n        loadTen(chatId,chatIndex,false);\r\n    };\r\n\r\n    return (\r\n        <div id = {'chat-side'}>\r\n            {\r\n                isMobile\r\n                    ?<div className=\"container\">\r\n                        <div className=\"row\" style={{maxHeight: '5vh'}}>\r\n                            <div className=\"col-1 arrow-back \" onClick={()=>GoBack('left')}>\r\n                                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\">\r\n                                    <path fill=\"none\" d=\"M0 0h24v24H0V0z\"/>\r\n                                    <path d=\"M20 11H7.83l5.59-5.59L12 4l-8 8 8 8 1.41-1.41L7.83 13H20v-2z\"/>\r\n                                </svg>\r\n                            </div>\r\n                            <h4 className='white tc hover-bg-white-40 pointer col-11' onClick={LoadMoreMessages}>\r\n                                Load more\r\n                            </h4>\r\n                        </div>\r\n                    </div>\r\n                    : <h4 className='white tc hover-bg-white-40 pointer col-10' onClick={LoadMoreMessages}>\r\n                        Load more\r\n                    </h4>\r\n            }\r\n\r\n            <ChatFeed\r\n                ClassName ={'feed'}\r\n                showSenderName\r\n                messages = {chatData.msg}\r\n            />\r\n            {/*emojiSeen\r\n                ?<Picker/>\r\n                : <></>\r\n            */}\r\n            <footer className={'footer'}>\r\n                <Input onSendClick={onSend} showEmoji={showEmoji} emojiSeen={emojiSeen}/>\r\n            </footer>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nexport default ChatWindow;","import React, {useContext} from 'react';\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport ChatWindow from \"../ChatWindow/ChatWindow\";\r\nimport {MainChatWindowContext} from \"./MainAppWindow\";\r\nimport {NotificationContext, UserChatsContext} from \"../../App\";\r\n\r\nexport default function RightPart({setNotification,LoadTenMessages,SendMessage,GoBack}) {\r\n\r\n    const {chats} = useContext(UserChatsContext);\r\n    const {notificationBody,notificationHeader} = useContext(NotificationContext);\r\n    const {chatIndex,isMobile} = useContext(MainChatWindowContext);\r\n\r\n    return (\r\n        <div className={ isMobile ? 'left-side col-12' :'right-side col-8 col-sm-8 col-md-8 col-lg-10 col-xl-10 '}>\r\n            <div>\r\n                <div className=\"container\">\r\n                    {\r\n                        notificationHeader\r\n                            ? < Alert variant=\"dark\" onClose={() => setNotification({}) } dismissible>\r\n                                {`${notificationHeader}!  ${notificationBody}`}\r\n                            </Alert>\r\n                            : <div/>\r\n                    }\r\n                    <div className=\"row\">\r\n                        {chatIndex === -1\r\n                            ? <div className='tc center col align-self-center'\r\n                                   id={'idle-msg'}>{'Click on a chat to start messaging!'}</div>\r\n                            : <div className='col'>\r\n                                <ChatWindow loadTen={LoadTenMessages} chatData={chats[chatIndex]} onSend={SendMessage(chatIndex,chatIndex)} GoBack = {GoBack}/>\r\n                            </div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","import React,{useState,useEffect,useContext} from 'react';\r\nimport {Redirect } from \"react-router-dom\";\r\nimport {UserChatsContext} from \"../../App\";\r\nimport SwitchToMobileModal from \"./SwitchToMobileModal\";\r\n\r\nimport '../../App.css';\r\nimport witcher from '../../lol.mp3';\r\nimport drStone from '../../dr_stone_ending.mp3';\r\nimport {AddTenMessagesToState} from \"../../Helper/ProcessData\";\r\nimport useMobileDetect from 'use-mobile-detect-hook';\r\nimport LeftPart from \"./ScreenWithFriends\";\r\nimport RightPart from \"./ScreenWithChats\";\r\n\r\n\r\n\r\nexport const MainChatWindowContext = React.createContext({chatId:null,chatIndex:null,isMobile:false});\r\n\r\n\r\n\r\nfunction MainAppWindow({setChats,SendMessage,logout,createNewChat,setNotification}) {\r\n\r\n    const {user,chats} = useContext(UserChatsContext);\r\n    const detectMobile = useMobileDetect();\r\n\r\n    const[chatId,setChatId] = useState(-1);\r\n    const[chatIndex,setChatIndex] = useState(-1);\r\n    const[song,setSong] = useState(null);\r\n    const[redirect,setRedirect] = useState(false);\r\n    const[isMobile,setIsMobile] = useState(false);\r\n    const[partToShow,setPartToShow] = useState('left');\r\n\r\n\r\n\r\n\r\n    const setSongMP3 = (songname) =>{\r\n        switch (songname) {\r\n            case 'witcher':\r\n                return witcher;\r\n            case 'drStone':\r\n                return drStone;\r\n            default:\r\n                return;\r\n        }\r\n    };\r\n\r\n    //Fetches the messages and updates the state of chats\r\n    const LoadTenMessages = (id,index,shouldSetChatId) =>{\r\n\r\n        // if should set chat id => method was called when clicking on a chat on the left, else from a chat itself\r\n        if(shouldSetChatId) setChatId(id);\r\n\r\n        let currentChatsState = Object.assign([],chats);\r\n        // works as a pointer (e.g changing this object will change it in the array as well)\r\n        let currentChat = currentChatsState[index];\r\n\r\n        //if there are more than 10 messages in the chat already, don't load new on first click\r\n        if(!currentChat.lastMessagesAreFetched && currentChat.msg.length >= 10){\r\n            currentChat.lastMessagesAreFetched = true;\r\n        }\r\n\r\n        //fetch only if it is first click on chat or when more messages are requested from chat + chat has more than 10 messages already\r\n        if(!currentChat.lastMessagesAreFetched || (!shouldSetChatId && currentChat.msg.length > 10)) {\r\n            AddTenMessagesToState(id,user,currentChat)\r\n                .then(newState => {\r\n                    currentChat = newState;\r\n                    setChats(currentChatsState);\r\n                })\r\n                .then( something=>{\r\n                    const chatWindow = document.getElementsByClassName(\"chat-history\")[0];\r\n                    chatWindow.scrollTop = 0;\r\n                })\r\n                .catch(err => {\r\n                    console.log(err);\r\n                    alert('error loading messages');\r\n                });\r\n        }\r\n    };\r\n\r\n    const updAudio = (enable) => {\r\n        const a = document.getElementsByTagName(\"audio\")[0];\r\n        enable ? a.play() : a.pause();\r\n    };\r\n\r\n    const setChatOnMobile = (index) =>{\r\n        setChatIndex(index);\r\n        setPartToShow('right');\r\n    };\r\n\r\n    useEffect(()=>{\r\n        if(!user){\r\n            setRedirect(true);\r\n        };\r\n    }, [detectMobile, user]);\r\n\r\n    return (\r\n        <>\r\n            <MainChatWindowContext.Provider value = {{chatId,chatIndex,isMobile}} >\r\n\r\n                {detectMobile.isMobile()\r\n                    ?<SwitchToMobileModal setIsMobile={setIsMobile}/>\r\n                    :<div/>}\r\n                {redirect\r\n                    ? <Redirect to ={'/'}/>\r\n                    : <div className=\"row\">\r\n                        <audio src={setSongMP3(song)} preload={'true'} loop/>\r\n                        {isMobile\r\n                            ?\r\n                            partToShow === 'left'\r\n                                ?<LeftPart LoadTenMessages={LoadTenMessages} createNewChat={createNewChat} logout={logout} setChatIndex={setChatOnMobile} setSong={setSong} updAudio={updAudio}/>\r\n                                :<RightPart setNotification={setNotification} LoadTenMessages={LoadTenMessages} SendMessage={SendMessage} GoBack = {setPartToShow} />\r\n                            : <>\r\n                                <LeftPart LoadTenMessages={LoadTenMessages} createNewChat={createNewChat} logout={logout} setChatIndex={setChatIndex} setSong={setSong} updAudio={updAudio}/>\r\n                                <RightPart setNotification={setNotification} LoadTenMessages={LoadTenMessages} SendMessage={SendMessage} />\r\n                            </>\r\n                        }\r\n                    </div>\r\n                }\r\n            </MainChatWindowContext.Provider>\r\n        </>\r\n    );\r\n}\r\nexport default MainAppWindow;\r\n","import React, { useState } from \"react\";\r\nimport { Button, FormGroup, FormControl } from \"react-bootstrap\";\r\nimport './Login.css';\r\nimport FormLabel from \"react-bootstrap/FormLabel\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\n\r\nimport {\r\nRedirect\r\n} from \"react-router-dom\";\r\n\r\nexport default function Login({loginOrRegister}) {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [error, setError] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n    const [success,setSuccess] = useState(false);\r\n\r\n\r\n    function validateForm() {\r\n        return email.length > 0 && password.length > 0;\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        setIsConnecting(true);\r\n        setTimeout(()=>console.log(),1000);\r\n        try {\r\n            await loginOrRegister({email, password}, 'login');\r\n            await (setSuccess(true));\r\n        }\r\n        catch(error) {\r\n            setTimeout(() => {\r\n                    setIsConnecting(false);\r\n                    if(error.toString().includes('Failed to fetch')){\r\n                        setError('No response from the server')\r\n                    }else {\r\n                        setError(error);\r\n                    }\r\n                }, 1000);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n        {success\r\n            ? <Redirect to={'/app'}/>\r\n            : <Card className=\"Login\">\r\n                <Card.Header> Sign In </Card.Header>\r\n                <Card.Body>\r\n                    <form onSubmit={handleSubmit}>\r\n                        <FormGroup controlId=\"email\">\r\n                            <FormLabel>Email</FormLabel>\r\n                            <FormControl\r\n                                autoFocus\r\n                                type=\"email\"\r\n                                value={email}\r\n                                onChange={e => setEmail(e.target.value)}\r\n                            />\r\n                        </FormGroup>\r\n                        <FormGroup controlId=\"password\">\r\n                            <FormLabel>Password</FormLabel>\r\n                            <FormControl\r\n                                value={password}\r\n                                onChange={e => setPassword(e.target.value)}\r\n                                type=\"password\"\r\n                            />\r\n                        </FormGroup>\r\n                        {error\r\n                            ? <FormGroup>\r\n                                <div className='tc dark-red'>{error}</div>\r\n                            </FormGroup>\r\n                            : <></>\r\n                        }\r\n\r\n                        <FormGroup className='tc'>\r\n                            <a className='tc' href={'/rocket-chat-front/#/register'}>Not signed up yet?</a>\r\n                        </FormGroup>\r\n                        <Button block variant={!validateForm() ? 'secondary' : \"primary\"}\r\n                                disabled={!validateForm() || isConnecting} type=\"submit\">\r\n                            {!isConnecting\r\n                                ? 'Login'\r\n                                : <Spinner\r\n                                    as=\"span\"\r\n                                    animation=\"border\"\r\n                                    size=\"sm\"\r\n                                    role=\"status\"\r\n                                    aria-hidden=\"true\"\r\n                                />\r\n                            }\r\n                        </Button>\r\n                    </form>\r\n                </Card.Body>\r\n            </Card>\r\n        }\r\n</>\r\n    );\r\n}","import React, { useState } from \"react\";\r\nimport { Button, FormGroup, FormControl } from \"react-bootstrap\";\r\nimport './Login.css';\r\nimport FormLabel from \"react-bootstrap/FormLabel\";\r\nimport Card from \"react-bootstrap/Card\";\r\nimport Spinner from \"react-bootstrap/Spinner\";\r\nimport {Redirect} from \"react-router-dom\";\r\n\r\nexport default function Register({loginOrRegister}) {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [name, setName] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isConnecting, setIsConnecting] = useState(false);\r\n    const [error, setError] = useState(\"\");\r\n    const [success,setSuccess] = useState(false);\r\n\r\n\r\n    function validateForm() {\r\n        return email.length > 0 && password.length > 0 && name.length;\r\n    }\r\n\r\n    async function handleSubmit(event) {\r\n        event.preventDefault();\r\n        setIsConnecting(true);\r\n        setTimeout(()=>console.log(),1000);\r\n        try {\r\n            await loginOrRegister({username:name,email, password}, 'register');\r\n            await (setSuccess(true));\r\n        }\r\n        catch(error) {\r\n            setTimeout(() => {\r\n                setIsConnecting(false);\r\n                if(error.toString().includes('Failed to fetch')){\r\n                    setError('No response from the server')\r\n                }else {\r\n                    setError(error);\r\n                }\r\n            }, 1000);\r\n        }\r\n    }\r\n    return (\r\n        <>\r\n            {success\r\n                ? <Redirect to={'/app'}/>\r\n                : <Card className=\"Login\">\r\n                    <Card.Header> Register </Card.Header>\r\n                    <Card.Body>\r\n                        <form onSubmit={handleSubmit}>\r\n                            <FormGroup controlId='name'>\r\n                                <FormLabel>Name</FormLabel>\r\n                                <FormControl\r\n                                    autoFocus\r\n                                    type=\"text\"\r\n                                    value={name}\r\n                                    onChange={e => setName(e.target.value)}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup controlId=\"email\">\r\n                                <FormLabel>Email</FormLabel>\r\n                                <FormControl\r\n                                    autoFocus\r\n                                    type=\"email\"\r\n                                    value={email}\r\n                                    onChange={e => setEmail(e.target.value)}\r\n                                />\r\n                            </FormGroup>\r\n                            <FormGroup controlId=\"password\">\r\n                                <FormLabel>Password</FormLabel>\r\n                                <FormControl\r\n                                    value={password}\r\n                                    onChange={e => setPassword(e.target.value)}\r\n                                    type=\"password\"\r\n                                />\r\n                            </FormGroup>\r\n                            {error\r\n                                ? <FormGroup>\r\n                                    <div className='tc dark-red'>{error}</div>\r\n                                </FormGroup>\r\n                                : <></>\r\n                            }\r\n                                <Button block variant={!validateForm() ? 'secondary' : \"primary\"}\r\n                                        disabled={!validateForm() || isConnecting} type=\"submit\">\r\n                                    {!isConnecting\r\n                                        ? 'Register'\r\n                                        : <Spinner\r\n                                            as=\"span\"\r\n                                            animation=\"border\"\r\n                                            size=\"sm\"\r\n                                            role=\"status\"\r\n                                            aria-hidden=\"true\"\r\n                                        />\r\n                                    }\r\n                                </Button>\r\n                        </form>\r\n                    </Card.Body>\r\n                </Card>\r\n            }\r\n            </>\r\n    );\r\n}","import React from 'react';\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport Login from \"./Login\";\r\nimport Register from \"./Register\";\r\nimport './welcome.css';\r\n\r\nfunction WelcomePage({loginOrRegister,path}) {\r\n\r\n    return (\r\n        <div >\r\n                <Navbar bg=\"dark\" variant={'dark'} expand=\"lg\">\r\n                    <Navbar.Brand >Rocket-Chat v0.1 BETA</Navbar.Brand>\r\n                    <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\r\n                    <Navbar.Collapse id=\"basic-navbar-nav\">\r\n                        <Nav className=\"mr-auto\">\r\n                            <Nav.Link href = {'/rocket-chat-front/#/login'}>Sign in</Nav.Link>\r\n                            <Nav.Link href = {'/rocket-chat-front/#/register'}>Register</Nav.Link>\r\n                        </Nav>\r\n                    </Navbar.Collapse>\r\n                </Navbar>\r\n            <Alert  variant={'warning'} className={'tc'}>\r\n                During the beta, please don't use your real email and don't send important messages over the chat!\r\n            </Alert>\r\n                {path==='/login'\r\n                    ?<Login  loginOrRegister={loginOrRegister}/>\r\n                    :<Register loginOrRegister={loginOrRegister} />\r\n                }\r\n\r\n            <img src={'https://dramarocket.com/wp-content/uploads/2018/01/icon-redrocket-2.png'} alt={'logo'} className={'center'}/>\r\n            </div>\r\n    );\r\n}\r\nexport default WelcomePage;","import {HubConnectionBuilder} from \"@aspnet/signalr\";\r\nimport {Message} from \"react-chat-ui\";\r\nimport {FindChatIndexByChatId} from \"./ProcessData\";\r\nimport {BackendLink} from \"../Constants/Const\";\r\n\r\n//very very hacky\r\nexport  async function createHubConnection (setUser,updateChats,setNotification) {\r\n    // Build new Hub Connection, url is currently hard coded.\r\n    const hubConnect = new HubConnectionBuilder()\r\n        .withUrl(`${BackendLink}/chat`)\r\n        .build();\r\n    try {\r\n        await hubConnect.start();\r\n        console.log('Connection successful!');\r\n\r\n        // my fav hack\r\n        let loc_user;\r\n        setUser(prev=>{\r\n            loc_user = prev;\r\n            return prev;\r\n        });\r\n\r\n        hubConnect.onclose(()=>console.log('I have lef!!'));\r\n\r\n        //when getCHat is received, if you are needed user, add an empty chat\r\n        //TODO add some notification for a receiver\r\n        hubConnect.on('getChat', (userId,chat)=>{\r\n            if(loc_user.userId === userId){\r\n                updateChats(prev=>{\r\n                    let updatedChat = Object.assign([],prev);\r\n                    updatedChat.push({id:chat.chatId,name:chat.chatName,msg:[]});\r\n                    return Object.assign([],updatedChat);\r\n                });\r\n                setNotification({notificationHeader: 'New Chat',notificationBody: `${chat.chatName} created a chat with you!`})\r\n            }\r\n        });\r\n\r\n        hubConnect.on('sendToAll', (userId,chatId,messageText)=>{\r\n            //can't move the insides of to a different method -> it crashes\r\n            console.log(userId,loc_user.userId,chatId,messageText);\r\n\r\n            updateChats(prevState => {\r\n                // index where the chat is located for current client\r\n                const neededChatIndex = FindChatIndexByChatId(chatId,prevState);\r\n                console.log(neededChatIndex,prevState);\r\n                // update state if the user has chat with this id and didnt send the message himself\r\n                if(neededChatIndex !== -1 && loc_user.userId !== userId){\r\n                    console.log('updating state');\r\n                    let updatedChats = Object.assign([],prevState);\r\n                    updatedChats[neededChatIndex].msg.push(new Message({id:1,message:messageText}));\r\n                    return updatedChats;\r\n                }\r\n                else{\r\n                    return prevState;\r\n                }\r\n            })\r\n        });\r\n    }\r\n    catch (err) {\r\n        alert(err);\r\n    }\r\n    return hubConnect;\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport MainAppWindow from \"./Components/MainAppWindow/MainAppWindow\";\r\nimport {\r\n    HashRouter as Router,\r\n    Switch,\r\n    Route,\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport WelcomePage from \"./Components/Welcome/WelcomePage\";\r\nimport {createHubConnection} from \"./Helper/HubConnection\";\r\nimport {Message} from \"react-chat-ui\";\r\nimport {GetAllChatsByUserId, TryLoginOrRegister} from \"./Helper/ApiFetcher\";\r\nimport {ProcessChats} from \"./Helper/ProcessData\";\r\n\r\nexport const UserChatsContext = React.createContext({user:{},chats:[]});\r\nexport const NotificationContext = React.createContext({notificationBody:null,notificationHeader:null});\r\n\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n    const[user,setUser] = useState(null);\r\n    const[hubConnection,setHubConnection] = useState(null);\r\n    const[notification,setNotification] = useState({notificationBody:null,notificationHeader:null});\r\n\r\n    //CHATS STATE USED TO BE LIKE DIS\r\n    // {id:100,name:'John',msg:[new Message({id:0,message:'lol'}),new Message({id:1,message:'lol!',senderName:'John'})]},\r\n    //         {id:99,name:'Donn',msg:[new Message({id:0,message:'lol'}),new Message({id:1,message:'KEK!',senderName:'Donn'})]}\r\n    const [chats,setChats] = useState([]);\r\n\r\n    //A delegate(eto function pls) to return the total number of chats user has.\r\n    // Chats are dispayed on the left, determine <Friend> elements.\r\n    /**********IN DEVELOPMENT***********/\r\n\r\n    //TODO refactor this component to creased the amount of lines(maybe)\r\n\r\n    // A function to load chats with last message, to be used on login\r\n    //Determines what is going to be displayed on the left side of main chat window\r\n    // Check every chat data received from the backed and renders accordingly\r\n    async function GetChats(userId)  {\r\n        try {\r\n            let chats = await GetAllChatsByUserId(userId);\r\n            const chatsToState = ProcessChats(chats,userId);\r\n            setChats(chatsToState);\r\n            return 'ok';\r\n        }\r\n        catch(err){\r\n            alert('error loading chats')\r\n        }\r\n    }\r\n\r\n    const CreateNewChat = (chatId,chatName) => {\r\n\r\n        hubConnection.invoke('ChatWithUserWasCreated',user.userId,chatId,{chatId,chatName:user.userName});\r\n        setChats(prevState => {\r\n            let updatedChat = Object.assign([],prevState);\r\n            updatedChat.push({id:chatId,name:chatName,msg:[]});\r\n            return Object.assign([],updatedChat);\r\n        })\r\n    };\r\n\r\n    //Function that tries to log in or register based on parameter\r\n    //if successful, starts socket communication and invokes GetChats method defined above\r\n    async function loginOrRegister (loginData,endpoint){\r\n        try {\r\n            let result = await TryLoginOrRegister(loginData,endpoint);\r\n            if (result) {\r\n                 endpoint === 'login'? setUser(result[0]): setUser(result);\r\n                //might need to be outside of current try/catch to separate from login error\r\n                await GetChats(endpoint === 'login'?result[0].userId : result.userId);\r\n                await ConnectAndSetHubToState();\r\n            }\r\n            return 'ok';\r\n        }\r\n        catch(err) {\r\n            console.log(err);\r\n            throw err;\r\n        }\r\n    }\r\n\r\n    const ConnectAndSetHubToState = async () =>{\r\n        let hub = await createHubConnection(setUser,setChats,setNotification);\r\n         setHubConnection(hub);\r\n    };\r\n\r\n    //Function that uses a closure(google it)\r\n    //after determining chat data, renders a new message + sends it to the server on the next invoke\r\n    const SendMessage = (chatId,chatIndex) => {\r\n        let l_chatIndex = chatIndex;\r\n        let l_chatId= chatId;\r\n        //invoke 'sendMessage' with chatId most likely\r\n        return function (msgText) {\r\n            hubConnection.invoke('SendDirectMessage',user.userId,l_chatId,msgText).catch(err=>console.log(err));\r\n            setChats(prevState => {\r\n                let updatedChat = Object.assign([],prevState[l_chatIndex]);\r\n                updatedChat.msg.push(new Message({id:0,message:msgText}));\r\n                return Object.assign([],prevState,updatedChat);\r\n            });\r\n        };\r\n    };\r\n\r\n    //needed to fix a bug with logout\r\n    const logout = () => {\r\n        setUser(null);\r\n        hubConnection.stop();\r\n        setHubConnection(null);\r\n    };\r\n\r\n    return (\r\n        <Router className = {'rocket'}>\r\n            <Switch>\r\n                <Route path=\"/app\">\r\n                    <UserChatsContext.Provider value={{user,chats}}>\r\n                        <NotificationContext.Provider value={notification}>\r\n                            <MainAppWindow setNotification={setNotification} setChats={setChats} SendMessage={SendMessage} logout={()=>logout()} createNewChat = {CreateNewChat}/>\r\n                        </NotificationContext.Provider>\r\n                    </UserChatsContext.Provider>\r\n                </Route>\r\n                <Route path=\"/register\">\r\n                    <WelcomePage path={'/register'}  loginOrRegister={loginOrRegister}/>\r\n                </Route>\r\n                <Route>\r\n                    <WelcomePage path={'/login'}  loginOrRegister={loginOrRegister}/>\r\n                </Route>\r\n            </Switch>\r\n        </Router>\r\n        );\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from \"./App\";\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/lol.f8b7a2e4.mp3\";","module.exports = __webpack_public_path__ + \"static/media/dr_stone_ending.470614e2.mp3\";"],"sourceRoot":""}