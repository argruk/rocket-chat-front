{"version":3,"sources":["lol.mp3","Components/Friends/Friends.js","Components/Settings/AudioSettingsModal.js","Components/Settings/Settings.js","Components/InputField/Input.js","Components/ChatWindow/ChatWindow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Friends","friends","clickFriend","map","friend","index","onClick","key","className","letter","name","charAt","justify","ellipsis","msg","length","message","AudioSettingsModal","show","handleClose","updateAudio","useState","value","setValue","Modal","onHide","Header","closeButton","Title","Body","ButtonToolbar","ToggleButtonGroup","type","onChange","val","ToggleButton","Footer","Button","variant","SettingsList","Settings","seen","modal","setModal","Dropdown","Toggle","size","id","xmlns","width","height","viewBox","d","fill","Menu","Item","Input","onSendClick","input","inputChange","onSend","event","target","align","fit","verticalAlign","ChatWindow","chatData","showSenderName","messages","App","Message","senderName","feed","updateFeed","chat","setChat","src","face_mp3","preload","loop","enable","a","document","getElementsByTagName","play","pause","msgText","prevState","updatedChat","Object","assign","push","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.948e804b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lol.f8b7a2e4.mp3\";","import React from 'react';\r\nimport './Friends.css'\r\nimport {ThemeProvider,Avatar,Row,ChatList,ChatListItem,Column,Title,Subtitle}\r\n    from '@livechat/ui-kit'\r\n\r\nfunction Friends({friends,clickFriend}) {\r\n    return (\r\n        <ThemeProvider>\r\n            <ChatList>\r\n            {friends.map((friend,index) =>(\r\n                <div onClick={()=>clickFriend(index)} key = {index} >\r\n                    <ChatListItem className = {'friend'} >\r\n                        <Avatar letter= {friend.name.charAt(0)} />\r\n                        <Column>\r\n                            <Row justify>\r\n                                <Title ellipsis>{friend.name}</Title>\r\n                            </Row>\r\n                            <Subtitle ellipsis>{friend.msg[friend.msg.length-1].message}</Subtitle>\r\n                        </Column>\r\n                    </ChatListItem>\r\n                </div>\r\n            ) )}\r\n            </ChatList>\r\n        </ThemeProvider>\r\n    );\r\n}\r\nexport default Friends;","import React,{useState} from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\nimport ButtonToolbar from \"react-bootstrap/ButtonToolbar\";\r\n\r\n\r\nfunction AudioSettingsModal({show,handleClose,updateAudio}) {\r\n    const [value, setValue] = useState(0);\r\n    const handleChange = (val) => {\r\n        setValue(val);\r\n        val === 1? updateAudio(true) : updateAudio(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Audio settings</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <ButtonToolbar>\r\n                    <h4> EarGasm   </h4>\r\n                    <ToggleButtonGroup type=\"radio\" name=\"options\" value={value} onChange={handleChange}>\r\n                        <ToggleButton value={1}>On</ToggleButton>\r\n                        <ToggleButton value={2}>Off</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n                </ButtonToolbar>\r\n            </Modal.Body>\r\n            <Modal.Footer>\r\n                <Button variant=\"secondary\" onClick={handleClose}>\r\n                    Close\r\n                </Button>\r\n            </Modal.Footer>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\nexport default AudioSettingsModal;","import React,{useState} from 'react';\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport AudioSettingsModal from \"./AudioSettingsModal\";\r\n\r\nconst SettingsList = ['Audio'];\r\n\r\n\r\nfunction Settings({updateAudio}) {\r\n    const [modal, setModal] = useState({type:'',seen:false});\r\n\r\n    const handleClose = () => setModal({type:'',seen:false});\r\n    const handleShow = (type) => setModal({type:type,seen:true});\r\n\r\n    return (\r\n        <>\r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" size={'sm'} id=\"dropdown-basic\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/>\r\n                </svg>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                    <Dropdown.Item onClick = {()=>handleShow(SettingsList[0])} >{SettingsList[0]}</Dropdown.Item>\r\n                <Dropdown.Item >{SettingsList[1]}</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n            {modal.type === 'Audio'\r\n                ? <AudioSettingsModal show = {modal.seen} handleClose = {handleClose} updateAudio={updateAudio}/>\r\n                :<div/>\r\n            }\r\n\r\n           </>\r\n\r\n    );\r\n}\r\nexport default Settings;","import React,{useState} from 'react';\r\nimport {ThemeProvider,TextComposer,Row,IconButton,AddIcon,TextInput,EmojiIcon,SendButton}\r\n    from '@livechat/ui-kit';\r\n\r\nfunction Input({onSendClick}) {\r\n    const[input,inputChange] = useState('');\r\n\r\n    const updField = (event) =>{\r\n      inputChange(event.target.value);\r\n    };\r\n    return (\r\n        <ThemeProvider>\r\n            <TextComposer onSend={()=>onSendClick(input)} onChange={updField}>\r\n                <Row align=\"center\">\r\n                    <IconButton fit>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                    <TextInput fill = 'true' />\r\n                    <SendButton fit />\r\n                </Row>\r\n\r\n                <Row verticalAlign=\"center\" justify=\"right\">\r\n                    <IconButton fit>\r\n                        <EmojiIcon />\r\n                    </IconButton>\r\n                </Row>\r\n            </TextComposer>\r\n        </ThemeProvider>\r\n    );\r\n}\r\nexport default Input;","import React from 'react';\r\nimport Input from \"../InputField/Input\";\r\nimport './Chat.css';\r\nimport { ChatFeed } from 'react-chat-ui'\r\n\r\n\r\n\r\nfunction ChatWindow({chatData,onSend}) {\r\n    return (\r\n        <div>\r\n            <ChatFeed\r\n                showSenderName\r\n                messages = {chatData.msg}\r\n            />\r\n            <Input onSendClick={onSend}/>\r\n        </div>\r\n    );\r\n}\r\nexport default ChatWindow;","import React,{useState} from 'react';\r\nimport Friends from \"./Components/Friends/Friends\";\r\nimport Settings from \"./Components/Settings/Settings\";\r\nimport ChatWindow from './Components/ChatWindow/ChatWindow'\r\nimport {Message} from 'react-chat-ui';\r\nimport face_mp3 from './lol.mp3';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [feed,updateFeed] = useState([{name:'John',msg:[new Message({id:0,message:'lol'}),new Message({id:1,message:'lol!',senderName:'John'})]},\r\n        {name:'Donn',msg:[new Message({id:0,message:'lol'}),new Message({id:1,message:'KEK!',senderName:'Donn'})]}]);\r\n\r\n    const[chat,setChat] = useState(-1);\r\n\r\n    const SendMessage = (msgText) => {\r\n        updateFeed(prevState => {\r\n            let updatedChat = Object.assign([],prevState[chat]);\r\n            updatedChat.msg.push(new Message({id:0,message:msgText}));\r\n          return Object.assign([],prevState,updatedChat);\r\n      })\r\n    };\r\n\r\n    const updAudio = (enable) => {\r\n        const a = document.getElementsByTagName(\"audio\")[0];\r\n        enable ? a.play() : a.pause();\r\n    };\r\n    return (\r\n      <div className=\"row\">\r\n          <audio src={face_mp3} preload loop/>\r\n          <div className='left-side col-4 col-sm-4 col-md-4 col-lg-2 col-xl-2'>\r\n            <Settings updateAudio ={updAudio}/>\r\n            <div className={'left-content'}>\r\n                <Friends friends={feed} clickFriend = {setChat}/>\r\n            </div>\r\n        </div>\r\n        <div className='right-side col-8 col-sm-8 col-md-8 col-lg-10 col-xl-10 '>\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        {chat === -1\r\n                            ?<div className='tc text-capitalize center col align-self-center' id={'idle-msg'}>Click on chat to start messaging</div>\r\n                            :<div className='col'><ChatWindow chatData={feed[chat]} onSend={SendMessage}/></div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}