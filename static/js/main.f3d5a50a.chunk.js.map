{"version":3,"sources":["lol.mp3","Components/Friends/Friends.js","Components/Settings/AudioSettingsModal.js","Components/Settings/Settings.js","Components/InputField/Input.js","Components/ChatWindow/ChatWindow.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Friends","friends","clickFriend","map","friend","index","onClick","key","className","letter","name","charAt","justify","ellipsis","msg","length","message","AudioSettingsModal","show","handleClose","updateAudio","useState","value","setValue","Modal","onHide","Header","closeButton","Title","Body","ToggleButtonGroup","type","onChange","val","ToggleButton","variant","SettingsList","Settings","seen","modal","setModal","Dropdown","Toggle","size","id","xmlns","width","height","viewBox","d","fill","Menu","Item","Input","onSendClick","input","inputChange","onSend","event","target","align","fit","verticalAlign","ChatWindow","chatData","ClassName","showSenderName","messages","App","Message","senderName","feed","updateFeed","chat","setChat","src","face_mp3","preload","loop","enable","a","document","getElementsByTagName","play","pause","msgText","prevState","updatedChat","Object","assign","push","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3d5a50a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/lol.f8b7a2e4.mp3\";","import React from 'react';\r\nimport './Friends.css'\r\nimport {ThemeProvider,Avatar,Row,ChatList,ChatListItem,Column,Title,Subtitle}\r\n    from '@livechat/ui-kit'\r\n\r\nfunction Friends({friends,clickFriend}) {\r\n    return (\r\n        <ThemeProvider>\r\n            <ChatList>\r\n            {friends.map((friend,index) =>(\r\n                <div onClick={()=>clickFriend(index)} key = {index} >\r\n                    <ChatListItem className = {'friend'} >\r\n                        <Avatar letter= {friend.name.charAt(0)} />\r\n                        <Column>\r\n                            <Row justify>\r\n                                <Title ellipsis>{friend.name}</Title>\r\n                            </Row>\r\n                            <Subtitle ellipsis>{friend.msg[friend.msg.length-1].message}</Subtitle>\r\n                        </Column>\r\n                    </ChatListItem>\r\n                </div>\r\n            ) )}\r\n            </ChatList>\r\n        </ThemeProvider>\r\n    );\r\n}\r\nexport default Friends;","import React,{useState} from 'react';\r\nimport Modal from \"react-bootstrap/Modal\";\r\nimport ToggleButtonGroup from \"react-bootstrap/ToggleButtonGroup\";\r\nimport ToggleButton from \"react-bootstrap/ToggleButton\";\r\n\r\n\r\n\r\nfunction AudioSettingsModal({show,handleClose,updateAudio}) {\r\n    const [value, setValue] = useState(0);\r\n    const handleChange = (val) => {\r\n        setValue(val);\r\n        val === 1? updateAudio(true) : updateAudio(false);\r\n    };\r\n\r\n    return (\r\n        <>\r\n        <Modal show={show} onHide={handleClose}>\r\n            <Modal.Header closeButton>\r\n                <Modal.Title>Audio settings</Modal.Title>\r\n            </Modal.Header>\r\n            <Modal.Body>\r\n                <h4> EarGasm </h4>\r\n                    <ToggleButtonGroup type=\"radio\" name=\"options\" value={value} onChange={handleChange}>\r\n                        <ToggleButton value={1}>On</ToggleButton>\r\n                        <ToggleButton variant ={'secondary'}  value={2}>Off</ToggleButton>\r\n                    </ToggleButtonGroup>\r\n            </Modal.Body>\r\n        </Modal>\r\n        </>\r\n    );\r\n}\r\nexport default AudioSettingsModal;","import React,{useState} from 'react';\r\nimport Dropdown from \"react-bootstrap/Dropdown\";\r\nimport AudioSettingsModal from \"./AudioSettingsModal\";\r\n\r\nconst SettingsList = ['Audio'];\r\n\r\n\r\nfunction Settings({updateAudio}) {\r\n    const [modal, setModal] = useState({type:'',seen:false});\r\n\r\n    const handleClose = () => setModal({type:'',seen:false});\r\n    const handleShow = (type) => setModal({type:type,seen:true});\r\n\r\n    return (\r\n        <>\r\n        <Dropdown>\r\n            <Dropdown.Toggle variant=\"secondary\" size={'sm'} id=\"dropdown-basic\">\r\n                <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n                <path d=\"M3 18h18v-2H3v2zm0-5h18v-2H3v2zm0-7v2h18V6H3z\"/>\r\n                </svg>\r\n            </Dropdown.Toggle>\r\n            <Dropdown.Menu>\r\n                    <Dropdown.Item onClick = {()=>handleShow(SettingsList[0])} >{SettingsList[0]}</Dropdown.Item>\r\n                <Dropdown.Item >{SettingsList[1]}</Dropdown.Item>\r\n            </Dropdown.Menu>\r\n        </Dropdown>\r\n            {modal.type === 'Audio'\r\n                ? <AudioSettingsModal show = {modal.seen} handleClose = {handleClose} updateAudio={updateAudio}/>\r\n                :<div/>\r\n            }\r\n\r\n           </>\r\n\r\n    );\r\n}\r\nexport default Settings;","import React,{useState} from 'react';\r\nimport {ThemeProvider,TextComposer,Row,IconButton,AddIcon,TextInput,EmojiIcon,SendButton}\r\n    from '@livechat/ui-kit';\r\n\r\nfunction Input({onSendClick}) {\r\n    const[input,inputChange] = useState('');\r\n\r\n    const updField = (event) =>{\r\n      inputChange(event.target.value);\r\n    };\r\n    return (\r\n        <ThemeProvider>\r\n            <TextComposer onSend={()=>onSendClick(input)} onChange={updField}>\r\n                <Row align=\"center\">\r\n                    <IconButton fit>\r\n                        <AddIcon />\r\n                    </IconButton>\r\n                    <TextInput fill = 'true' />\r\n                    <SendButton fit />\r\n                </Row>\r\n\r\n                <Row verticalAlign=\"center\" justify=\"right\">\r\n                    <IconButton fit>\r\n                        <EmojiIcon />\r\n                    </IconButton>\r\n                </Row>\r\n            </TextComposer>\r\n        </ThemeProvider>\r\n    );\r\n}\r\nexport default Input;","import React from 'react';\r\nimport Input from \"../InputField/Input\";\r\nimport './Chat.css';\r\nimport { ChatFeed } from 'react-chat-ui'\r\n\r\n\r\n\r\nfunction ChatWindow({chatData,onSend}) {\r\n    return (\r\n\r\n        <div>\r\n            <ChatFeed\r\n                ClassName ={'feed'}\r\n                showSenderName\r\n                messages = {chatData.msg}\r\n            />\r\n            <footer className={'footer'}>\r\n                <Input onSendClick={onSend}/>\r\n            </footer>\r\n        </div>\r\n    );\r\n\r\n\r\n}\r\nexport default ChatWindow;","import React,{useState} from 'react';\r\nimport Friends from \"./Components/Friends/Friends\";\r\nimport Settings from \"./Components/Settings/Settings\";\r\nimport ChatWindow from './Components/ChatWindow/ChatWindow'\r\nimport {Message} from 'react-chat-ui';\r\nimport face_mp3 from './lol.mp3';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n    const [feed,updateFeed] = useState([{name:'John',msg:[new Message({id:0,message:'lol'}),new Message({id:1,message:'lol!',senderName:'John'})]},\r\n        {name:'Donn',msg:[new Message({id:0,message:'lol'}),new Message({id:1,message:'KEK!',senderName:'Donn'})]}]);\r\n\r\n    const[chat,setChat] = useState(-1);\r\n\r\n    const SendMessage = (msgText) => {\r\n        updateFeed(prevState => {\r\n            let updatedChat = Object.assign([],prevState[chat]);\r\n            updatedChat.msg.push(new Message({id:0,message:msgText}));\r\n          return Object.assign([],prevState,updatedChat);\r\n      })\r\n    };\r\n\r\n    const updAudio = (enable) => {\r\n        const a = document.getElementsByTagName(\"audio\")[0];\r\n        enable ? a.play() : a.pause();\r\n    };\r\n    return (\r\n      <div className=\"row\">\r\n          <audio src={face_mp3} preload loop/>\r\n          <div className='left-side col-4 col-sm-4 col-md-4 col-lg-2 col-xl-2'>\r\n            <Settings updateAudio ={updAudio}/>\r\n            <div className={'left-content'}>\r\n                <Friends friends={feed} clickFriend = {setChat}/>\r\n            </div>\r\n        </div>\r\n        <div className='right-side col-8 col-sm-8 col-md-8 col-lg-10 col-xl-10 '>\r\n            <div>\r\n                <div className=\"container\">\r\n                    <div className=\"row\">\r\n                        {chat === -1\r\n                            ?<div className='tc text-capitalize center col align-self-center' id={'idle-msg'}>Click on chat to start messaging</div>\r\n                            :<div className='col'><ChatWindow chatData={feed[chat]} onSend={SendMessage}/></div>\r\n                        }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport App from './App';\r\nimport 'tachyons';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}